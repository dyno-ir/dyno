{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_MUX)) goto fail_0;
if (r0.getNumOperands() > 4) goto fail_0;
if (r0.getNumOperands() < 4) goto fail_0;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_0;
if ((*r3)->as<ConstantRef>() != "1'h1"_bv) goto fail_0;
r4 = std::next(r3);
r5 = std::next(r4);
r6 = std::next(r5);
replaceAllUses(replaced, r1, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_0:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_MUX)) goto fail_1;
if (r0.getNumOperands() > 4) goto fail_1;
if (r0.getNumOperands() < 4) goto fail_1;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_1;
if ((*r3)->as<ConstantRef>() != "1'h0"_bv) goto fail_1;
r4 = std::next(r3);
r5 = std::next(r4);
r6 = std::next(r5);
replaceAllUses(replaced, r1, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_1:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
FatDynObjRef<>* r5;
FatDynObjRef<>* r6;
if (!r0.isOpc(HW_REPEAT)) goto fail_2;
if (r0.getNumOperands() > 2) goto fail_2;
if (r0.getNumOperands() < 2) goto fail_2;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);

  auto lenOut = *(*RefRange{r1, r3}.begin())->as<WireRef>().getNumBits();
  auto lenIn = *(*RefRange{r3, r4}.begin())->as<HWValue>().getNumBits();
  if (lenOut != lenIn)
    goto fail_2;
replaceAllUses(replaced, r1, r3);
deleteF(matched, ctx, r0);
return true;
}
fail_2:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(OP_XOR)) goto fail_3;
if (r0.getNumOperands() > 3) goto fail_3;
if (r0.getNumOperands() < 3) goto fail_3;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_3;
if (!(*r4)->as<ConstantRef>().valueEqualsS("1'h1"_bv)) goto fail_3;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(OP_NOT, (r3-r1)+(r4-r3));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_3:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
SmallVec<FatDynObjRef<>, 4> r4;
SmallVec<FatDynObjRef<>, 4> r5;
InstrRef::iterator r6;
InstrRef r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
InstrRef::iterator r12;
FatDynObjRef<>* r13;
FatDynObjRef<>* r14;
FatDynObjRef<>* r15;
FatDynObjRef<>* r16;
FatDynObjRef<>* r18;
FatDynObjRef<>* r19;
FatDynObjRef<>* r21;
FatDynObjRef<>* r22;
if (!r0.isOpc(OP_ADD)) goto fail_4;
if (r0.getNumOperands() < 2) goto fail_4;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
for (r6 = r3;; r6++) {
if (r6 == r2) break;
if (r4.size() > 0) goto cont_4_0;
if ((*r6)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_4_0;
r7 = getDefInstr(r6);
if (!r7.isOpc(OP_SUB)) goto cont_4_0;
if (r7.getNumOperands() > 3) goto cont_4_0;
if (r7.getNumOperands() < 3) goto cont_4_0;
r8 = r7.begin();
r9 = r7.end();
r10 = std::next(r8);
r11 = std::next(r10);
r12 = std::next(r11);
appendCopy(r4, r6);
goto loop_4_0_continue;
cont_4_0:;
appendCopy(r5, r6);
goto loop_4_0_continue;
cont_4_1:;
loop_4_0_continue:;
}
loop_4_0_break:;
if (r4.size() < 1) goto fail_4;
r13 = r4.begin();
r14 = r4.end();
if (*r13 != (*r8)->fat()) goto fail_4;
r15 = r5.begin();
r16 = r5.end();
if (r6 != r2) goto fail_4;

  FatDynObjRef<> w = ctx.getWires().create((*Range{r8, r10}.begin())->as<HWValue>().getNumBits()); RefRange{r18, r19} = w;

  FatDynObjRef<> constant = cbuild.val("1'h1"_bv).resize(*(*Range{r1, r3}.begin())->as<WireRef>().getNumBits(), false).get();
  RefRange{r21, r22} = constant;
auto r17 = build.buildInstrRaw(OP_NOT, (r19-r18)+(r12-r11));
copyOperands(r17, r18, r19);
r17.other();
copyOperands(r17, r11, r12);
auto r20 = build.buildInstrRaw(OP_ADD, (r3-r1)+(r16-r15)+(r11-r10)+(r19-r18)+(r22-r21));
copyOperands(r20, r1, r3);
r20.other();
copyOperands(r20, r15, r16);
copyOperands(r20, r10, r11);
copyOperands(r20, r18, r19);
copyOperands(r20, r21, r22);
deleteIfSingleUse(matched, ctx, r7);
deleteF(matched, ctx, r0);
return true;
}
fail_4:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
FatDynObjRef<>* r12;
FatDynObjRef<>* r13;
FatDynObjRef<>* r15;
FatDynObjRef<>* r16;
if (!r0.isOpc(OP_SUB)) goto fail_5;
if (r0.getNumOperands() > 3) goto fail_5;
if (r0.getNumOperands() < 3) goto fail_5;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_5;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_ADD)) goto fail_5;
if (r4.getNumOperands() < 1) goto fail_5;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
for (r8 = r7;; r8++) {
if (r8 == r6) break;
loop_5_0_continue:;
}
loop_5_0_break:;
if (r8 != r6) goto fail_5;
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_5;
r10 = std::next(r9);

  FatDynObjRef<> w = ctx.getWires().create((*Range{r5, r7}.begin())->as<HWValue>().getNumBits()); RefRange{r12, r13} = w;

  FatDynObjRef<> constant = cbuild.val("1'h1"_bv).resize(*(*Range{r1, r3}.begin())->as<WireRef>().getNumBits(), false).get();
  RefRange{r15, r16} = constant;
auto r11 = build.buildInstrRaw(OP_NOT, (r13-r12)+(r10-r9));
copyOperands(r11, r12, r13);
r11.other();
copyOperands(r11, r9, r10);
auto r14 = build.buildInstrRaw(OP_ADD, (r3-r1)+(r8-r7)+(r13-r12)+(r16-r15));
copyOperands(r14, r1, r3);
r14.other();
copyOperands(r14, r7, r8);
copyOperands(r14, r12, r13);
copyOperands(r14, r15, r16);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_5:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
FatDynObjRef<>* r7;
FatDynObjRef<>* r8;
if (!r0.isOpc(OP_SUB)) goto fail_6;
if (r0.getNumOperands() > 3) goto fail_6;
if (r0.getNumOperands() < 3) goto fail_6;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_6;
r5 = std::next(r4);

  FatDynObjRef<> negated = cbuild.val((*Range{r4, r5}.begin())->as<ConstantRef>()).neg().get();
  RefRange{r7, r8} = negated;
auto r6 = build.buildInstrRaw(OP_ADD, (r3-r1)+(r4-r3)+(r8-r7));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
copyOperands(r6, r7, r8);
deleteF(matched, ctx, r0);
return true;
}
fail_6:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
SmallVec<FatDynObjRef<>, 4> r4;
SmallVec<FatDynObjRef<>, 4> r5;
InstrRef::iterator r6;
InstrRef r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef r11;
InstrRef::iterator r12;
InstrRef::iterator r13;
InstrRef::iterator r14;
InstrRef::iterator r15;
InstrRef::iterator r16;
InstrRef::iterator r17;
FatDynObjRef<>* r18;
FatDynObjRef<>* r19;
FatDynObjRef<>* r20;
FatDynObjRef<>* r21;
FatDynObjRef<>* r23;
FatDynObjRef<>* r24;
FatDynObjRef<>* r26;
FatDynObjRef<>* r27;
FatDynObjRef<>* r29;
FatDynObjRef<>* r30;
if (!r0.isOpc(OP_ADD)) goto fail_7;
if (r0.getNumOperands() < 2) goto fail_7;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
for (r6 = r3;; r6++) {
if (r6 == r2) break;
if (r4.size() > 0) goto cont_7_0;
if ((*r6)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_7_0;
r7 = getDefInstr(r6);
if (!r7.isOpc(OP_NOT)) goto cont_7_0;
if (r7.getNumOperands() > 2) goto cont_7_0;
if (r7.getNumOperands() < 2) goto cont_7_0;
r8 = r7.begin();
r9 = r7.end();
r10 = std::next(r8);
if ((*r10)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_7_0;
r11 = getDefInstr(r10);
if (!r11.isOpc(OP_ADD)) goto cont_7_0;
if (r11.getNumOperands() > 3) goto cont_7_0;
if (r11.getNumOperands() < 3) goto cont_7_0;
r12 = r11.begin();
r13 = r11.end();
r14 = std::next(r12);
r15 = std::next(r14);
r16 = std::next(r15);
r17 = std::next(r10);
if ((*r10)->fat() != (*r12)->fat()) goto cont_7_0;
appendCopy(r4, r6);
goto loop_7_0_continue;
cont_7_0:;
appendCopy(r5, r6);
goto loop_7_0_continue;
cont_7_1:;
loop_7_0_continue:;
}
loop_7_0_break:;
if (r4.size() < 1) goto fail_7;
r18 = r4.begin();
r19 = r4.end();
if (*r18 != (*r8)->fat()) goto fail_7;
r20 = r5.begin();
r21 = r5.end();
if (r6 != r2) goto fail_7;

  FatDynObjRef<> w = ctx.getWires().create((*Range{r14, r15}.begin())->as<HWValue>().getNumBits()); RefRange{r23, r24} = w;

  FatDynObjRef<> w2 = ctx.getWires().create((*Range{r15, r16}.begin())->as<HWValue>().getNumBits()); RefRange{r26, r27} = w2;

  FatDynObjRef<> constant = cbuild.val("1'h1"_bv).resize(*(*Range{r14, r15}.begin())->as<WireRef>().getNumBits(), false).get();
  RefRange{r29, r30} = constant;
auto r22 = build.buildInstrRaw(OP_NOT, (r24-r23)+(r15-r14));
copyOperands(r22, r23, r24);
r22.other();
copyOperands(r22, r14, r15);
auto r25 = build.buildInstrRaw(OP_NOT, (r27-r26)+(r16-r15));
copyOperands(r25, r26, r27);
r25.other();
copyOperands(r25, r15, r16);
auto r28 = build.buildInstrRaw(OP_ADD, (r3-r1)+(r24-r23)+(r27-r26)+(r21-r20)+(r30-r29));
copyOperands(r28, r1, r3);
r28.other();
copyOperands(r28, r23, r24);
copyOperands(r28, r26, r27);
copyOperands(r28, r20, r21);
copyOperands(r28, r29, r30);
deleteIfSingleUse(matched, ctx, r11);
deleteIfSingleUse(matched, ctx, r7);
deleteF(matched, ctx, r0);
return true;
}
fail_7:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
SmallVec<FatDynObjRef<>, 4> r4;
SmallVec<FatDynObjRef<>, 4> r5;
InstrRef::iterator r6;
InstrRef r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
InstrRef::iterator r12;
InstrRef r13;
InstrRef::iterator r14;
InstrRef::iterator r15;
InstrRef::iterator r16;
SmallVec<FatDynObjRef<>, 4> r17;
SmallVec<FatDynObjRef<>, 4> r18;
InstrRef::iterator r19;
FatDynObjRef<>* r20;
FatDynObjRef<>* r21;
FatDynObjRef<>* r22;
FatDynObjRef<>* r23;
InstrRef::iterator r24;
FatDynObjRef<>* r25;
FatDynObjRef<>* r26;
FatDynObjRef<>* r27;
FatDynObjRef<>* r28;
FatDynObjRef<>* r30;
FatDynObjRef<>* r31;
FatDynObjRef<>* r32;
FatDynObjRef<>* r33;
if (!r0.isOpc(OP_ADD)) goto fail_8;
if (r0.getNumOperands() < 2) goto fail_8;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
for (r6 = r3;; r6++) {
if (r6 == r2) break;
if (r4.size() > 0) goto cont_8_0;
if ((*r6)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_8_0;
r7 = getDefInstr(r6);
if (!r7.isOpc(HW_MUX)) goto cont_8_0;
if (r7.getNumOperands() > 4) goto cont_8_0;
if (r7.getNumOperands() < 4) goto cont_8_0;
r8 = r7.begin();
r9 = r7.end();
r10 = std::next(r8);
r11 = std::next(r10);
if ((*r11)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_8_0;
r12 = std::next(r11);
if ((*r12)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_8_0;
r13 = getDefInstr(r12);
if (!r13.isOpc(OP_ADD)) goto cont_8_0;
if (r13.getNumOperands() > 3) goto cont_8_0;
if (r13.getNumOperands() < 3) goto cont_8_0;
r14 = r13.begin();
r15 = r13.end();
r16 = std::next(r14);
for (r19 = r16;; r19++) {
if (r19 == r15) break;
if (r17.size() > 0) goto cont_8_1;
appendCopy(r17, r19);
goto loop_8_1_continue;
cont_8_1:;
if (r18.size() > 0) goto cont_8_2;
appendCopy(r18, r19);
goto loop_8_1_continue;
cont_8_2:;
loop_8_1_continue:;
}
loop_8_1_break:;
if (r17.size() < 1) goto cont_8_0;
if (r18.size() < 1) goto cont_8_0;
r20 = r17.begin();
r21 = r17.end();
if (*r20 != (*r11)->fat()) goto cont_8_0;
r22 = r18.begin();
r23 = r18.end();
r24 = std::next(r12);
if ((*r12)->fat() != (*r14)->fat()) goto cont_8_0;
appendCopy(r4, r6);
goto loop_8_0_continue;
cont_8_0:;
appendCopy(r5, r6);
goto loop_8_0_continue;
cont_8_3:;
loop_8_0_continue:;
}
loop_8_0_break:;
if (r4.size() < 1) goto fail_8;
r25 = r4.begin();
r26 = r4.end();
if (*r25 != (*r8)->fat()) goto fail_8;
r27 = r5.begin();
r28 = r5.end();
if (r6 != r2) goto fail_8;

  FatDynObjRef<> w = ctx.getWires().create((*Range{r11, r12}.begin())->as<HWValue>().getNumBits()); RefRange{r30, r31} = w;

  FatDynObjRef<> constant = cbuild.val("1'h0"_bv).resize(*(*Range{r14, r16}.begin())->as<WireRef>().getNumBits(), false).get();
  RefRange{r32, r33} = constant;
auto r29 = build.buildInstrRaw(HW_MUX, (r31-r30)+(r11-r10)+(r33-r32)+(r23-r22));
copyOperands(r29, r30, r31);
r29.other();
copyOperands(r29, r10, r11);
copyOperands(r29, r32, r33);
copyOperands(r29, r22, r23);
auto r34 = build.buildInstrRaw(OP_ADD, (r3-r1)+(r12-r11)+(r31-r30)+(r28-r27));
copyOperands(r34, r1, r3);
r34.other();
copyOperands(r34, r11, r12);
copyOperands(r34, r30, r31);
copyOperands(r34, r27, r28);
deleteIfSingleUse(matched, ctx, r13);
deleteIfSingleUse(matched, ctx, r7);
deleteF(matched, ctx, r0);
return true;
}
fail_8:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(HW_LOAD)) goto fail_9;
if (r0.getNumOperands() > 3) goto fail_9;
if (r0.getNumOperands() < 3) goto fail_9;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_9;
if (!(*r4)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_9;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(HW_LOAD, (r3-r1)+(r4-r3));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_9:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(HW_STORE)) goto cont_10_0;
goto goto_10_0;
cont_10_0:;
if (!r0.isOpc(HW_STORE_DEFER)) goto fail_10;
goto_10_0:;
if (r0.getNumOperands() > 3) goto fail_10;
if (r0.getNumOperands() < 3) goto fail_10;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_10;
if (!(*r4)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_10;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(r0.getDialectOpcode(), (r3-r1)+(r4-r3));
r6.other();
copyOperands(r6, r1, r3);
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_10:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_STORE_DEFER)) goto fail_11;
if (r0.getNumOperands() > 4) goto fail_11;
if (r0.getNumOperands() < 4) goto fail_11;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_11;
if (!(*r5)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_11;
r6 = std::next(r5);
auto r7 = build.buildInstrRaw(HW_STORE_DEFER, (r3-r1)+(r4-r3)+(r5-r4));
r7.other();
copyOperands(r7, r1, r3);
copyOperands(r7, r3, r4);
copyOperands(r7, r4, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_11:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_CONCAT)) goto fail_12;
if (r0.getNumOperands() < 2) goto fail_12;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
for (r4 = r3;; r4++) {
if (r4 == r2) goto fail_12;
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto cont_12_0;
if ((*r4)->as<ConstantRef>() != "0'"_bv) goto cont_12_0;
r5 = std::next(r4);
goto loop_12_0_break;
cont_12_0:;
loop_12_0_continue:;
}
loop_12_0_break:;
for (r6 = r5;; r6++) {
if (r6 == r2) break;
loop_12_1_continue:;
}
loop_12_1_break:;
if (r6 != r2) goto fail_12;
auto r7 = build.buildInstrRaw(HW_CONCAT, (r3-r1)+(r4-r3)+(r6-r5));
copyOperands(r7, r1, r3);
r7.other();
copyOperands(r7, r3, r4);
copyOperands(r7, r5, r6);
deleteF(matched, ctx, r0);
return true;
}
fail_12:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
if (!r0.isOpc(HW_CONCAT)) goto fail_13;
if (r0.getNumOperands() > 2) goto fail_13;
if (r0.getNumOperands() < 2) goto fail_13;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
replaceAllUses(replaced, r1, r3);
deleteF(matched, ctx, r0);
return true;
}
fail_13:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(HW_SPLICE)) goto fail_14;
if (r0.getNumOperands() > 3) goto fail_14;
if (r0.getNumOperands() < 3) goto fail_14;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_14;
if ((*r4)->as<ConstantRef>() != "32'h00000000"_bv) goto fail_14;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(OP_TRUNC, (r3-r1)+(r4-r3));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_14:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
if (!r0.isOpc(HW_SPLICE)) goto fail_15;
if (r0.getNumOperands() > 2) goto fail_15;
if (r0.getNumOperands() < 2) goto fail_15;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
auto r5 = build.buildInstrRaw(OP_TRUNC, (r3-r1)+(r4-r3));
copyOperands(r5, r1, r3);
r5.other();
copyOperands(r5, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_15:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
InstrRef::iterator r12;
InstrRef::iterator r13;
FatDynObjRef<>* r14;
FatDynObjRef<>* r15;
FatDynObjRef<>* r17;
FatDynObjRef<>* r18;
if (!r0.isOpc(HW_SPLICE)) goto fail_16;
if (r0.getNumOperands() < 3) goto fail_16;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_16;
r4 = getDefInstr(r3);
if (!r4.isOpc(HW_SPLICE)) goto fail_16;
if (r4.getNumOperands() < 3) goto fail_16;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r8);
for (r10 = r9;; r10++) {
if (r10 == r6) break;
loop_16_0_continue:;
}
loop_16_0_break:;
if (r10 != r6) goto fail_16;
r11 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_16;
r12 = std::next(r11);
for (r13 = r12;; r13++) {
if (r13 == r2) break;
loop_16_1_continue:;
}
loop_16_1_break:;
if (r13 != r2) goto fail_16;

  if (!(*RefRange{r5, r7}.begin())->as<WireRef>().hasSingleUse())
    goto fail_16;

  FatDynObjRef<> sum = cbuild.val((*Range{r8, r9}.begin())->as<ConstantRef>()).add((*Range{r11, r12}.begin())->as<ConstantRef>()).get();
  RefRange{r17, r18} = sum;
auto r16 = build.buildInstrRaw(HW_SPLICE, (r3-r1)+(r8-r7)+(r18-r17)+(r10-r9)+(r13-r12));
copyOperands(r16, r1, r3);
r16.other();
copyOperands(r16, r7, r8);
copyOperands(r16, r17, r18);
copyOperands(r16, r9, r10);
copyOperands(r16, r12, r13);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_16:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
FatDynObjRef<>* r10;
FatDynObjRef<>* r11;
if (!r0.isOpc(OP_TRUNC)) goto fail_17;
if (r0.getNumOperands() > 2) goto fail_17;
if (r0.getNumOperands() < 2) goto fail_17;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_17;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_ZEXT)) goto cont_17_0;
goto goto_17_0;
cont_17_0:;
if (!r4.isOpc(OP_SEXT)) goto cont_17_1;
goto goto_17_1;
cont_17_1:;
if (!r4.isOpc(OP_ANYEXT)) goto fail_17;
goto_17_1:;
goto_17_0:;
if (r4.getNumOperands() > 2) goto fail_17;
if (r4.getNumOperands() < 2) goto fail_17;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_17;

  auto inBits = (*RefRange{r7, r8}.begin())->as<HWValue>().getNumBits();
  auto outBits = (*RefRange{r1, r3}.begin())->as<WireRef>().getNumBits();
  if (!(*outBits < *inBits))
    goto fail_17;
auto r12 = build.buildInstrRaw(OP_TRUNC, (r3-r1)+(r8-r7));
copyOperands(r12, r1, r3);
r12.other();
copyOperands(r12, r7, r8);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_17:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
FatDynObjRef<>* r10;
FatDynObjRef<>* r11;
if (!r0.isOpc(OP_TRUNC)) goto fail_18;
if (r0.getNumOperands() > 2) goto fail_18;
if (r0.getNumOperands() < 2) goto fail_18;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_18;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_ZEXT)) goto cont_18_0;
goto goto_18_0;
cont_18_0:;
if (!r4.isOpc(OP_SEXT)) goto cont_18_1;
goto goto_18_1;
cont_18_1:;
if (!r4.isOpc(OP_ANYEXT)) goto fail_18;
goto_18_1:;
goto_18_0:;
if (r4.getNumOperands() > 2) goto fail_18;
if (r4.getNumOperands() < 2) goto fail_18;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_18;

  auto inBits = (*RefRange{r7, r8}.begin())->as<HWValue>().getNumBits();
  auto outBits = (*RefRange{r1, r3}.begin())->as<WireRef>().getNumBits();
  if (!(*outBits == *inBits))
    goto fail_18;
replaceAllUses(replaced, r1, r7);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_18:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
FatDynObjRef<>* r10;
FatDynObjRef<>* r11;
if (!r0.isOpc(OP_TRUNC)) goto fail_19;
if (r0.getNumOperands() > 2) goto fail_19;
if (r0.getNumOperands() < 2) goto fail_19;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_19;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_ZEXT)) goto cont_19_0;
goto goto_19_0;
cont_19_0:;
if (!r4.isOpc(OP_SEXT)) goto cont_19_1;
goto goto_19_1;
cont_19_1:;
if (!r4.isOpc(OP_ANYEXT)) goto fail_19;
goto_19_1:;
goto_19_0:;
if (r4.getNumOperands() > 2) goto fail_19;
if (r4.getNumOperands() < 2) goto fail_19;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_19;

  auto inBits = (*RefRange{r7, r8}.begin())->as<HWValue>().getNumBits();
  auto outBits = (*RefRange{r1, r3}.begin())->as<WireRef>().getNumBits();
  if (!(*outBits > *inBits))
    goto fail_19;
auto r12 = build.buildInstrRaw(r4.getDialectOpcode(), (r3-r1)+(r8-r7));
copyOperands(r12, r1, r3);
r12.other();
copyOperands(r12, r7, r8);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_19:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
FatDynObjRef<>* r10;
FatDynObjRef<>* r11;
if (!r0.isOpc(OP_TRUNC)) goto fail_20;
if (r0.getNumOperands() > 2) goto fail_20;
if (r0.getNumOperands() < 2) goto fail_20;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_20;
r4 = getDefInstr(r3);
if (!r4.isOpc(HW_LOAD)) goto fail_20;
if (r4.getNumOperands() > 2) goto fail_20;
if (r4.getNumOperands() < 2) goto fail_20;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_20;

  if ((*RefRange{r5, r7}.begin())->as<WireRef>().getNumUses() != 1)
    goto fail_20;
auto r12 = build.buildInstrRaw(HW_LOAD, (r3-r1)+(r8-r7));
copyOperands(r12, r1, r3);
r12.other();
copyOperands(r12, r7, r8);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_20:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
FatDynObjRef<>* r11;
FatDynObjRef<>* r12;
if (!r0.isOpc(OP_TRUNC)) goto fail_21;
if (r0.getNumOperands() > 2) goto fail_21;
if (r0.getNumOperands() < 2) goto fail_21;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_21;
r4 = getDefInstr(r3);
if (!r4.isOpc(HW_LOAD)) goto fail_21;
if (r4.getNumOperands() > 3) goto fail_21;
if (r4.getNumOperands() < 3) goto fail_21;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r8);
r10 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_21;

  if ((*RefRange{r5, r7}.begin())->as<WireRef>().getNumUses() != 1)
    goto fail_21;
auto r13 = build.buildInstrRaw(HW_LOAD, (r3-r1)+(r8-r7)+(r9-r8));
copyOperands(r13, r1, r3);
r13.other();
copyOperands(r13, r7, r8);
copyOperands(r13, r8, r9);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_21:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(HW_CONCAT)) goto fail_22;
if (r0.getNumOperands() > 3) goto fail_22;
if (r0.getNumOperands() < 3) goto fail_22;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_22;
if (!(*r3)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_22;
r4 = std::next(r3);
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(OP_ZEXT, (r3-r1)+(r5-r4));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r4, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_22:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
InstrRef::iterator r12;
InstrRef::iterator r13;
InstrRef::iterator r14;
InstrRef::iterator r15;
InstrRef::iterator r16;
if (!r0.isOpc(HW_CONCAT)) goto fail_23;
if (r0.getNumOperands() > 3) goto fail_23;
if (r0.getNumOperands() < 3) goto fail_23;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_23;
r4 = getDefInstr(r3);
if (!r4.isOpc(HW_REPEAT)) goto fail_23;
if (r4.getNumOperands() < 1) goto fail_23;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);

  if (!(*Range{r7, std::next(r7)}.begin())->is<WireRef>())
    goto fail_23;
  if (!"32'h00000001"_bv.valueEquals(*(*Range{r7, std::next(r7)}.begin())->as<WireRef>().getNumBits()))
    goto fail_23;
r8 = getDefInstr(r7);
if (!r8.isOpc(HW_SPLICE)) goto fail_23;
if (r8.getNumOperands() < 2) goto fail_23;
r9 = r8.begin();
r10 = r8.end();
r11 = std::next(r9);
r12 = std::next(r11);

  FatDynObjRef<> c = ConstantRef::fromU32(*(*Range{r11, r12}.begin())->as<HWValue>().getNumBits() - 1);
  if ((*Range{r12, std::next(r12)}.begin())->as<FatDynObjRef<>>() != c)
    goto fail_23;
r13 = std::next(r12);
if (r13 != r10) goto fail_23;
r14 = std::next(r7);
if ((*r7)->fat() != (*r9)->fat()) goto fail_23;
if (r14 != r6) goto fail_23;
r15 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_23;
r16 = std::next(r15);
if ((*r15)->fat() != (*r11)->fat()) goto fail_23;
auto r17 = build.buildInstrRaw(OP_SEXT, (r3-r1)+(r12-r11));
copyOperands(r17, r1, r3);
r17.other();
copyOperands(r17, r11, r12);
deleteIfSingleUse(matched, ctx, r8);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_23:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(OP_ICMP_EQ)) goto fail_24;
if (r0.getNumOperands() > 3) goto fail_24;
if (r0.getNumOperands() < 3) goto fail_24;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_24;
if ((*r4)->as<ConstantRef>() != "1'h0"_bv) goto fail_24;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(OP_NOT, (r3-r1)+(r4-r3));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_24:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(OP_ICMP_EQ)) goto fail_25;
if (r0.getNumOperands() > 3) goto fail_25;
if (r0.getNumOperands() < 3) goto fail_25;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_25;
if ((*r4)->as<ConstantRef>() != "1'h1"_bv) goto fail_25;
r5 = std::next(r4);
replaceAllUses(replaced, r1, r3);
deleteF(matched, ctx, r0);
return true;
}
fail_25:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(OP_ICMP_NE)) goto fail_26;
if (r0.getNumOperands() > 3) goto fail_26;
if (r0.getNumOperands() < 3) goto fail_26;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_26;
if ((*r4)->as<ConstantRef>() != "1'h1"_bv) goto fail_26;
r5 = std::next(r4);
auto r6 = build.buildInstrRaw(OP_NOT, (r3-r1)+(r4-r3));
copyOperands(r6, r1, r3);
r6.other();
copyOperands(r6, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_26:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
if (!r0.isOpc(OP_ICMP_NE)) goto fail_27;
if (r0.getNumOperands() > 3) goto fail_27;
if (r0.getNumOperands() < 3) goto fail_27;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_27;
if ((*r4)->as<ConstantRef>() != "1'h0"_bv) goto fail_27;
r5 = std::next(r4);
replaceAllUses(replaced, r1, r3);
deleteF(matched, ctx, r0);
return true;
}
fail_27:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
if (!r0.isOpc(OP_NOT)) goto fail_28;
if (r0.getNumOperands() > 2) goto fail_28;
if (r0.getNumOperands() < 2) goto fail_28;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_28;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_NOT)) goto fail_28;
if (r4.getNumOperands() > 2) goto fail_28;
if (r4.getNumOperands() < 2) goto fail_28;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_28;
replaceAllUses(replaced, r1, r7);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_28:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
if (!r0.isOpc(OP_SUB)) goto fail_29;
if (r0.getNumOperands() > 3) goto fail_29;
if (r0.getNumOperands() < 3) goto fail_29;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_29;
if (!(*r3)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_29;
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_29;
r5 = getDefInstr(r4);
if (!r5.isOpc(OP_SUB)) goto fail_29;
if (r5.getNumOperands() > 3) goto fail_29;
if (r5.getNumOperands() < 3) goto fail_29;
r6 = r5.begin();
r7 = r5.end();
r8 = std::next(r6);
if ((*r8)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_29;
if (!(*r8)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_29;
r9 = std::next(r8);
r10 = std::next(r9);
r11 = std::next(r4);
if ((*r4)->fat() != (*r6)->fat()) goto fail_29;
replaceAllUses(replaced, r1, r9);
deleteIfSingleUse(matched, ctx, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_29:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
InstrRef::iterator r8;
InstrRef::iterator r9;
InstrRef::iterator r10;
InstrRef::iterator r11;
if (!r0.isOpc(HW_MUX)) goto fail_30;
if (r0.getNumOperands() > 4) goto fail_30;
if (r0.getNumOperands() < 4) goto fail_30;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_30;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_NOT)) goto fail_30;
if (r4.getNumOperands() > 2) goto fail_30;
if (r4.getNumOperands() < 2) goto fail_30;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
r8 = std::next(r7);
r9 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_30;
r10 = std::next(r9);
r11 = std::next(r10);
auto r12 = build.buildInstrRaw(HW_MUX, (r3-r1)+(r8-r7)+(r11-r10)+(r10-r9));
copyOperands(r12, r1, r3);
r12.other();
copyOperands(r12, r7, r8);
copyOperands(r12, r10, r11);
copyOperands(r12, r9, r10);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_30:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_MUX)) goto fail_31;
if (r0.getNumOperands() > 4) goto fail_31;
if (r0.getNumOperands() < 4) goto fail_31;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
r5 = std::next(r4);
r6 = std::next(r5);
if ((*r5)->fat() != (*r4)->fat()) goto fail_31;
replaceAllUses(replaced, r1, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_31:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
SmallVec<FatDynObjRef<>, 4> r8;
SmallVec<FatDynObjRef<>, 4> r9;
InstrRef::iterator r10;
FatDynObjRef<>* r11;
FatDynObjRef<>* r12;
FatDynObjRef<>* r13;
FatDynObjRef<>* r14;
InstrRef::iterator r15;
InstrRef r16;
InstrRef::iterator r17;
InstrRef::iterator r18;
InstrRef::iterator r19;
SmallVec<FatDynObjRef<>, 4> r20;
SmallVec<FatDynObjRef<>, 4> r21;
InstrRef::iterator r22;
InstrRef r23;
InstrRef::iterator r24;
InstrRef::iterator r25;
InstrRef::iterator r26;
InstrRef::iterator r27;
FatDynObjRef<>* r28;
FatDynObjRef<>* r29;
FatDynObjRef<>* r30;
FatDynObjRef<>* r31;
InstrRef::iterator r32;
if (!r0.isOpc(OP_OR)) goto fail_32;
if (r0.getNumOperands() < 2) goto fail_32;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);

  if (!(*Range{r3, std::next(r3)}.begin())->is<WireRef>())
    goto fail_32;
  if (!"32'h00000001"_bv.valueEquals(*(*Range{r3, std::next(r3)}.begin())->as<WireRef>().getNumBits()))
    goto fail_32;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_AND)) goto fail_32;
if (r4.getNumOperands() > 3) goto fail_32;
if (r4.getNumOperands() < 3) goto fail_32;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
for (r10 = r7;; r10++) {
if (r10 == r6) break;
if (r8.size() > 0) goto cont_32_0;
appendCopy(r8, r10);
goto loop_32_0_continue;
cont_32_0:;
if (r9.size() > 0) goto cont_32_1;
appendCopy(r9, r10);
goto loop_32_0_continue;
cont_32_1:;
loop_32_0_continue:;
}
loop_32_0_break:;
if (r8.size() < 1) goto fail_32;
if (r9.size() < 1) goto fail_32;
r11 = r8.begin();
r12 = r8.end();
r13 = r9.begin();
r14 = r9.end();
r15 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_32;
if ((*r15)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_32;
r16 = getDefInstr(r15);
if (!r16.isOpc(OP_AND)) goto fail_32;
if (r16.getNumOperands() > 3) goto fail_32;
if (r16.getNumOperands() < 3) goto fail_32;
r17 = r16.begin();
r18 = r16.end();
r19 = std::next(r17);
for (r22 = r19;; r22++) {
if (r22 == r18) break;
if (r20.size() > 0) goto cont_32_2;
appendCopy(r20, r22);
goto loop_32_1_continue;
cont_32_2:;
if (r21.size() > 0) goto cont_32_3;
if ((*r22)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_32_3;
r23 = getDefInstr(r22);
if (!r23.isOpc(OP_NOT)) goto cont_32_3;
if (r23.getNumOperands() > 2) goto cont_32_3;
if (r23.getNumOperands() < 2) goto cont_32_3;
r24 = r23.begin();
r25 = r23.end();
r26 = std::next(r24);
r27 = std::next(r26);
if ((*r26)->fat() != *r13) goto cont_32_3;
appendCopy(r21, r22);
goto loop_32_1_continue;
cont_32_3:;
loop_32_1_continue:;
}
loop_32_1_break:;
if (r20.size() < 1) goto fail_32;
if (r21.size() < 1) goto fail_32;
r28 = r20.begin();
r29 = r20.end();
r30 = r21.begin();
r31 = r21.end();
if (*r30 != (*r24)->fat()) goto fail_32;
r32 = std::next(r15);
if ((*r15)->fat() != (*r17)->fat()) goto fail_32;
if (r32 != r2) goto fail_32;
auto r33 = build.buildInstrRaw(HW_MUX, (r3-r1)+(r14-r13)+(r12-r11)+(r29-r28));
copyOperands(r33, r1, r3);
r33.other();
copyOperands(r33, r13, r14);
copyOperands(r33, r11, r12);
copyOperands(r33, r28, r29);
deleteIfSingleUse(matched, ctx, r23);
deleteIfSingleUse(matched, ctx, r16);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_32:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
InstrRef::iterator r7;
SmallVec<FatDynObjRef<>, 4> r8;
SmallVec<FatDynObjRef<>, 4> r9;
InstrRef::iterator r10;
InstrRef r11;
InstrRef::iterator r12;
InstrRef::iterator r13;
InstrRef::iterator r14;
InstrRef::iterator r15;
FatDynObjRef<>* r16;
FatDynObjRef<>* r17;
FatDynObjRef<>* r18;
FatDynObjRef<>* r19;
InstrRef::iterator r20;
InstrRef r21;
InstrRef::iterator r22;
InstrRef::iterator r23;
InstrRef::iterator r24;
SmallVec<FatDynObjRef<>, 4> r25;
SmallVec<FatDynObjRef<>, 4> r26;
InstrRef::iterator r27;
FatDynObjRef<>* r28;
FatDynObjRef<>* r29;
FatDynObjRef<>* r30;
FatDynObjRef<>* r31;
InstrRef::iterator r32;
if (!r0.isOpc(OP_OR)) goto fail_33;
if (r0.getNumOperands() < 2) goto fail_33;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);

  if (!(*Range{r3, std::next(r3)}.begin())->is<WireRef>())
    goto fail_33;
  if (!"32'h00000001"_bv.valueEquals(*(*Range{r3, std::next(r3)}.begin())->as<WireRef>().getNumBits()))
    goto fail_33;
r4 = getDefInstr(r3);
if (!r4.isOpc(OP_AND)) goto fail_33;
if (r4.getNumOperands() > 3) goto fail_33;
if (r4.getNumOperands() < 3) goto fail_33;
r5 = r4.begin();
r6 = r4.end();
r7 = std::next(r5);
for (r10 = r7;; r10++) {
if (r10 == r6) break;
if (r8.size() > 0) goto cont_33_0;
appendCopy(r8, r10);
goto loop_33_0_continue;
cont_33_0:;
if (r9.size() > 0) goto cont_33_1;
if ((*r10)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto cont_33_1;
r11 = getDefInstr(r10);
if (!r11.isOpc(OP_NOT)) goto cont_33_1;
if (r11.getNumOperands() > 2) goto cont_33_1;
if (r11.getNumOperands() < 2) goto cont_33_1;
r12 = r11.begin();
r13 = r11.end();
r14 = std::next(r12);
r15 = std::next(r14);
appendCopy(r9, r10);
goto loop_33_0_continue;
cont_33_1:;
loop_33_0_continue:;
}
loop_33_0_break:;
if (r8.size() < 1) goto fail_33;
if (r9.size() < 1) goto fail_33;
r16 = r8.begin();
r17 = r8.end();
r18 = r9.begin();
r19 = r9.end();
if (*r18 != (*r12)->fat()) goto fail_33;
r20 = std::next(r3);
if ((*r3)->fat() != (*r5)->fat()) goto fail_33;
if ((*r20)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_33;
r21 = getDefInstr(r20);
if (!r21.isOpc(OP_AND)) goto fail_33;
if (r21.getNumOperands() > 3) goto fail_33;
if (r21.getNumOperands() < 3) goto fail_33;
r22 = r21.begin();
r23 = r21.end();
r24 = std::next(r22);
for (r27 = r24;; r27++) {
if (r27 == r23) break;
if (r25.size() > 0) goto cont_33_2;
appendCopy(r25, r27);
goto loop_33_1_continue;
cont_33_2:;
if (r26.size() > 0) goto cont_33_3;
appendCopy(r26, r27);
goto loop_33_1_continue;
cont_33_3:;
loop_33_1_continue:;
}
loop_33_1_break:;
if (r25.size() < 1) goto fail_33;
if (r26.size() < 1) goto fail_33;
r28 = r25.begin();
r29 = r25.end();
r30 = r26.begin();
r31 = r26.end();
if (*r30 != (*r14)->fat()) goto fail_33;
r32 = std::next(r20);
if ((*r20)->fat() != (*r22)->fat()) goto fail_33;
if (r32 != r2) goto fail_33;
auto r33 = build.buildInstrRaw(HW_MUX, (r3-r1)+(r15-r14)+(r29-r28)+(r17-r16));
copyOperands(r33, r1, r3);
r33.other();
copyOperands(r33, r14, r15);
copyOperands(r33, r28, r29);
copyOperands(r33, r16, r17);
deleteIfSingleUse(matched, ctx, r21);
deleteIfSingleUse(matched, ctx, r11);
deleteIfSingleUse(matched, ctx, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_33:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_MUX)) goto fail_34;
if (r0.getNumOperands() > 4) goto fail_34;
if (r0.getNumOperands() < 4) goto fail_34;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_34;
if ((*r4)->as<ConstantRef>() != "1'h1"_bv) goto fail_34;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_34;
if ((*r5)->as<ConstantRef>() != "1'h0"_bv) goto fail_34;
r6 = std::next(r5);
replaceAllUses(replaced, r1, r3);
deleteF(matched, ctx, r0);
return true;
}
fail_34:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
if (!r0.isOpc(HW_MUX)) goto fail_35;
if (r0.getNumOperands() > 4) goto fail_35;
if (r0.getNumOperands() < 4) goto fail_35;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_35;
if ((*r4)->as<ConstantRef>() != "1'h0"_bv) goto fail_35;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_35;
if ((*r5)->as<ConstantRef>() != "1'h1"_bv) goto fail_35;
r6 = std::next(r5);
auto r7 = build.buildInstrRaw(OP_NOT, (r3-r1)+(r4-r3));
copyOperands(r7, r1, r3);
r7.other();
copyOperands(r7, r3, r4);
deleteF(matched, ctx, r0);
return true;
}
fail_35:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
FatDynObjRef<>* r8;
FatDynObjRef<>* r9;
if (!r0.isOpc(HW_MUX)) goto fail_36;
if (r0.getNumOperands() > 4) goto fail_36;
if (r0.getNumOperands() < 4) goto fail_36;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_36;
if (!(*r4)->as<ConstantRef>().valueEqualsS("1'h1"_bv)) goto fail_36;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_36;
r6 = std::next(r5);

  FatDynObjRef<> w = ctx.getWires().create((*Range{r1, r3}.begin())->as<HWValue>().getNumBits()); RefRange{r8, r9} = w;
auto r7 = build.buildInstrRaw(HW_REPEAT, (r9-r8)+(r4-r3));
copyOperands(r7, r8, r9);
r7.other();
copyOperands(r7, r3, r4);
auto r10 = build.buildInstrRaw(OP_OR, (r3-r1)+(r9-r8)+(r6-r5));
copyOperands(r10, r1, r3);
r10.other();
copyOperands(r10, r8, r9);
copyOperands(r10, r5, r6);
deleteF(matched, ctx, r0);
return true;
}
fail_36:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
FatDynObjRef<>* r8;
FatDynObjRef<>* r9;
FatDynObjRef<>* r11;
FatDynObjRef<>* r12;
if (!r0.isOpc(HW_MUX)) goto fail_37;
if (r0.getNumOperands() > 4) goto fail_37;
if (r0.getNumOperands() < 4) goto fail_37;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_37;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_37;
if (!(*r5)->as<ConstantRef>().valueEqualsS("1'h1"_bv)) goto fail_37;
r6 = std::next(r5);

  FatDynObjRef<> w = ctx.getWires().create((*Range{r3, r4}.begin())->as<HWValue>().getNumBits()); RefRange{r8, r9} = w;

  FatDynObjRef<> w2 = ctx.getWires().create((*Range{r1, r3}.begin())->as<HWValue>().getNumBits()); RefRange{r11, r12} = w2;
auto r7 = build.buildInstrRaw(OP_NOT, (r9-r8)+(r4-r3));
copyOperands(r7, r8, r9);
r7.other();
copyOperands(r7, r3, r4);
auto r10 = build.buildInstrRaw(HW_REPEAT, (r12-r11)+(r9-r8));
copyOperands(r10, r11, r12);
r10.other();
copyOperands(r10, r8, r9);
auto r13 = build.buildInstrRaw(OP_OR, (r3-r1)+(r12-r11)+(r5-r4));
copyOperands(r13, r1, r3);
r13.other();
copyOperands(r13, r11, r12);
copyOperands(r13, r4, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_37:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
FatDynObjRef<>* r8;
FatDynObjRef<>* r9;
if (!r0.isOpc(HW_MUX)) goto fail_38;
if (r0.getNumOperands() > 4) goto fail_38;
if (r0.getNumOperands() < 4) goto fail_38;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_38;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_38;
if (!(*r5)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_38;
r6 = std::next(r5);

  FatDynObjRef<> w = ctx.getWires().create((*Range{r1, r3}.begin())->as<HWValue>().getNumBits()); RefRange{r8, r9} = w;
auto r7 = build.buildInstrRaw(HW_REPEAT, (r9-r8)+(r4-r3));
copyOperands(r7, r8, r9);
r7.other();
copyOperands(r7, r3, r4);
auto r10 = build.buildInstrRaw(OP_AND, (r3-r1)+(r9-r8)+(r5-r4));
copyOperands(r10, r1, r3);
r10.other();
copyOperands(r10, r8, r9);
copyOperands(r10, r4, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_38:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
InstrRef::iterator r5;
InstrRef::iterator r6;
FatDynObjRef<>* r8;
FatDynObjRef<>* r9;
FatDynObjRef<>* r11;
FatDynObjRef<>* r12;
if (!r0.isOpc(HW_MUX)) goto fail_39;
if (r0.getNumOperands() > 4) goto fail_39;
if (r0.getNumOperands() < 4) goto fail_39;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
r4 = std::next(r3);
if ((*r4)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_39;
if (!(*r4)->as<ConstantRef>().valueEqualsS("1'h0"_bv)) goto fail_39;
r5 = std::next(r4);
if ((*r5)->as<FatDynObjRef<>>().getType() != HW_WIRE) goto fail_39;
r6 = std::next(r5);

  FatDynObjRef<> w = ctx.getWires().create((*Range{r3, r4}.begin())->as<HWValue>().getNumBits()); RefRange{r8, r9} = w;

  FatDynObjRef<> w2 = ctx.getWires().create((*Range{r1, r3}.begin())->as<HWValue>().getNumBits()); RefRange{r11, r12} = w2;
auto r7 = build.buildInstrRaw(OP_NOT, (r9-r8)+(r4-r3));
copyOperands(r7, r8, r9);
r7.other();
copyOperands(r7, r3, r4);
auto r10 = build.buildInstrRaw(HW_REPEAT, (r12-r11)+(r9-r8));
copyOperands(r10, r11, r12);
r10.other();
copyOperands(r10, r8, r9);
auto r13 = build.buildInstrRaw(OP_AND, (r3-r1)+(r12-r11)+(r6-r5));
copyOperands(r13, r1, r3);
r13.other();
copyOperands(r13, r11, r12);
copyOperands(r13, r5, r6);
deleteF(matched, ctx, r0);
return true;
}
fail_39:;
{
InstrRef::iterator r1;
InstrRef::iterator r2;
InstrRef::iterator r3;
InstrRef::iterator r4;
FatDynObjRef<>* r5;
FatDynObjRef<>* r6;
if (!r0.isOpc(OP_TRUNC)) goto fail_40;
if (r0.getNumOperands() > 2) goto fail_40;
if (r0.getNumOperands() < 2) goto fail_40;
r1 = r0.begin();
r2 = r0.end();
r3 = std::next(r1);
if ((*r3)->as<FatDynObjRef<>>().getType() != CORE_CONSTANT) goto fail_40;
r4 = std::next(r3);

  FatDynObjRef<> temp = cbuild.val((*RefRange{r3, r4}.begin())->as<ConstantRef>()).resize(*(*RefRange{r1, r3}.begin())->as<WireRef>().getNumBits()).get();
  RefRange{r5, r6} = temp;
replaceAllUses(replaced, r1, r5);
deleteF(matched, ctx, r0);
return true;
}
fail_40:;
